# Copyright 2023 Canonical
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = format, lint, unit
min_version = 4.0.0

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
;lib_path = {tox_root}/lib/charms/operator_name_with_underscores
all_path = {[vars]src_path} {[vars]tests_path}
lxd_name = ratings-func-test
ftest_path = {tox_root}/tests/functional

[testenv]
set_env =
    PYTHONPATH = {tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=pdb.set_trace
    PY_COLORS=1
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS
    GITHUB_ACTION

[testenv:format]
description = Apply coding style standards to code
deps =
    black
    ruff
commands =
    black {[vars]all_path}
    ruff check --fix {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    black
    ruff
    codespell
commands =
    # if this charm owns a lib, uncomment "lib_path" variable
    # and uncomment the following line
    # codespell {[vars]lib_path}
    codespell {tox_root} -L assertIn
    ruff check {[vars]all_path}
    black --check --diff {[vars]all_path}

[testenv:unit]
description = Run unit tests with coverage using unittest
deps =
    coverage[toml]
    pydantic
    -r {tox_root}/requirements.txt
setenv =
    LOG_LEVEL=DEBUG 
commands =
    coverage run --source={[vars]src_path} \
                 -m unittest discover -s {[vars]tests_path}/unit -p "*.py" -v
    coverage report
    coverage xml

[testenv:functional]
description = Build a LXD container for functional tests then run the tests
allowlist_externals =
    lxc
    bash
commands =
    # Create a LXC container with the relevant packages installed
    bash -c 'lxc launch -qe ubuntu:jammy {[vars]lxd_name} -c=user.user-data="$(<{[vars]ftest_path}/test_setup.yaml)"'
    
    # Wait for the cloud-init process to finish
    lxc exec {[vars]lxd_name} -- bash -c "cloud-init status -w >/dev/null 2>&1"

    bash -c 'lxc config set {[vars]lxd_name} security.nesting=true'
    bash -c 'lxc config set {[vars]lxd_name} security.syscalls.intercept.mknod=true'
    bash -c 'lxc config set {[vars]lxd_name} security.syscalls.intercept.setxattr=true'

    # Copy all the files needed for integration testing
    lxc file push -qp {toxinidir}/tox.ini {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qp {toxinidir}/pyproject.toml {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qp {toxinidir}/config.yaml {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qpr {toxinidir}/lib {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qpr {toxinidir}/src {[vars]lxd_name}/{[vars]lxd_name}/
    lxc file push -qpr {[vars]tests_path} {[vars]lxd_name}/{[vars]lxd_name}/

    # Run the tests
    lxc exec {[vars]lxd_name} -- tox -c /{[vars]lxd_name}/tox.ini -e functional-tests {posargs}
commands_post =
    -lxc stop {[vars]lxd_name}

[testenv:functional-tests]
description = Run functional tests
deps =
    ops==2.7.0
    pytest==7.4.2
commands =
    pytest -v \
           -s \
           --tb native \
           --log-cli-level=INFO \
           {posargs} \
           {[vars]tests_path}/functional/test_ratings.py

[testenv:integration]
description = Run integration tests
deps =
    pytest
    tenacity
    juju
    pytest-operator
    grpcio
    -r {tox_root}/requirements.txt
commands =
    pytest -v \
           -s \
           --tb native \
           --log-cli-level=INFO \
           {posargs} \
           {[vars]tests_path}/integration/test_charm.py

[pycodestyle]
ignore = E501
